/* Two-stage parallel reduction based on the "Simple Reductions" OpenCL
   optimization case study on the AMD Developer Central website */

/* The kernel should be called defining TYPE as the input/output data type,
   OP(acc, el) as the operator and OP_NULL as the null item for the operator
   (e.g. 0 for sum). Also, SMALL_WORKGROUP should be define if the worgroup
   size matches the device warp/wavefront size */

/* Two ways to do reductions are presented: one tries to do in-warp reductions
   first and then cross-warp reductions, the other follows a more traditional
   approach */

#ifndef TYPE
#define TYPE float
#endif

#ifndef FMIN_OP
#define FMIN_OP(acc, el) acc = fmin(acc, el)
#define FMIN_OP_NULL NAN
#endif

#ifndef ADD_OP
#define ADD_OP(acc, el) acc += el
#define ADD_OP_NULL 0
#endif

#if !defined(OP)
#error "Please define an OP"
#endif

#if !defined(OP_NULL)
#error "Please define an OP_NULL"
#endif

__kernel void reduce(__global const TYPE* restrict input,
		__local volatile TYPE* restrict scratch,
		uint numels,
		__global TYPE* restrict output)
{
	uint gid = get_global_id(0);
	uint stride = get_global_size(0);
	TYPE acc = OP_NULL;
	while (gid < numels) {
		TYPE el = input[gid];
		OP(acc, el);
		gid += stride;
	}

	uint lid = get_local_id(0);
	scratch[lid] = acc;

#ifdef WAVE_SIZE
	uint wave_num = lid / WAVE_SIZE;
	uint wid = lid - (wave_num * WAVE_SIZE);
	for (uint offset = WAVE_SIZE/2; offset; offset >>= 1) {
		/* in-wave reductions don't need a barrier */
		barrier(CLK_LOCAL_MEM_FENCE);
		if (wid < offset) {
			TYPE other = scratch[lid+offset];
			OP(acc, other);
			scratch[lid] = acc;
		}
	}
	/* cross-wave reductions */
	uint num_waves = (get_local_size(0) + WAVE_SIZE - 1)/WAVE_SIZE;
	for (uint skip_waves = 1; skip_waves < num_waves; skip_waves *=2) {
		barrier(CLK_LOCAL_MEM_FENCE);
		uint offset = skip_waves * WAVE_SIZE;
		if (wid == 0 && (wave_num & (2*skip_waves - 1)) == 0) {
			TYPE other = scratch[lid+offset];
			OP(acc, other);
			scratch[lid] = acc;
		}
	}
#else
	for (uint offset = get_local_size(0)/2; offset; offset >>= 1) {
#ifndef SMALL_WORKGROUP
		barrier(CLK_LOCAL_MEM_FENCE);
#endif
		if (lid < offset) {
			TYPE other = scratch[lid+offset];
			OP(acc, other);
			scratch[lid] = acc;
		}
	}
#endif

	if (lid == 0)
		output[get_group_id(0)] = acc;
}
